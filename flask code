from flask import request, render_template, redirect, url_for ,Flask, jsonify
import cv2
import numpy as np
# import systemcheck
from tensorflow.keras.models import load_model
import scipy
import os
import shutil

UPLOAD_FOLDER = r"static\images\uploads"
data_dir = "Data"
classes = []
for folder in os.listdir(data_dir):
for clss in os.listdir(os.path.join(data_dir,folder)):
classes.append(f"{folder}-{clss}")

app = Flask(__name__)
app.config['IMAGE_UPLOADS'] = UPLOAD_FOLDER

# Define the allowed file extensions that can be uploaded
ALLOWED_EXTENSIONS = set(['png', 'jpg', 'jpeg'])

def pre(img_path):
# Input image
try:
cnn_model = load_model("saved_model.h5")
cnn_model.summary()
img = cv2.imread(img_path)
img = cv2.resize(img,(100,150))
img = img.reshape((1,100,150,3))
type_pred = cnn_model.predict(img)
except Exception as e:
print(e)
return classes[type_pred.argmax()]

@app.route('/')
def image_upload():
return render_template('image_upload.html', predictions=None)

def allowed_file(filename):
return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/predict', methods=['POST', 'GET'])
def predict():
if 'file' not in request.files:
return render_template('image_upload.html', predictions=None)

file = request.files['file']
if file.filename == '':
return render_template('image_upload.html', predictions=None)

if file and allowed_file(file.filename):
path = os.path.join(app.config['IMAGE_UPLOADS'], file.filename)
file.save(path)
print("path",path)
predictions = pre(path)
if path.endswith(".dcm"):
path = os.path.join(r"static\images","no_preview.jpg")
print(path)
return render_template('image_upload.html',
predictions=predictions,path=path)#.split("\\",1)[1])

return render_template('image_upload.html', predictions=None)

if __name__ == "__main__":
if len(os.listdir(r"static\images\uploads"))>2:
for i in os.listdir(r"static\images\uploads"):
try:
os.remove(os.path.join(r"static\images\uploads",str(i)))
except PermissionError:
try:
shutil.rmtree(str(i))
except:
print("clear the storagemanualy")
app.run(debug=True, port=8081)
